DEMO 0
	git checkout tags/demo-0

	static list of some lunch spots in Sudbury

DEMO 1
	git checkout tags/demo-1

	declared our eatApp module; set it as our application module using the data-ng-app directive

	created a controller that has the list of restaraunts in it

	used data-ng-controller to bind the controller to the div that contains the UI elements it is responsible for

	use the data-ng-repeat directive to enumerate the restaraunt names

DEMO 2
	git checkout tags/demo-2

	Added add/remove functionality

	Change to array of places in controller automatically changes those that are displayed

DEMO 3
	git checkout tags/demo-3

	highlighting most recently added place

	Illustrates that can data-bind to an object returned by a function

DEMO 4
	git checkout tags/demo-4

	Extract rendering of element in UL to <place-entry></place-entry>

	'=' sets up two-way data binding between "outside world" and the directive
	('@' sets up one-way data binding, '&' executes method on containing scope)

	Breaks delete button - time to talk about isolate scope

DEMO 5
	git checkout tags/demo-5

	execute the removePlace function via "&" link

DEMO 6
	git checkout tags/demo-6

	refactor into PlacesService, inject into controller

	point out that now we don't really need our controller to have an add method; we could do it directly in service.

	SERVICES ARE SINGLETONS

DEMO 7
	git checkout tags/demo-7

	LunchPlacesService injected into place-entry directive

	Don't need the remove via '&' link on directive

	Don't need the remove method in the controller

DEMO 8
	git gheckout tags/demo-8

	created last-added-place attribute directive with LunchPlacesService injected

	Don't need the has last junk in the controller

DEMO 9
	git checkout tags/demo-9

	Filter list based on text using built-in filter

DEMO 10
	git checkout tags/demo-10

	Add filter that appends "mmmm Pizza"

DEMO 11
	git checkout tags/demo-11

	refactor to use the foursquare service

	$resource injection

DEMO 12
	git checkout tags/demo-12

	refactor service to be minification-compatible